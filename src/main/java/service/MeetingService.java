package service;

import dao.MeetingDao;
import dao.EventRegistrationDao;
import model.MeetingPost;
import model.EventRegistration;

import java.sql.Connection;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;

public class MeetingService {
    private MeetingDao meetingDao;
    private EventRegistrationDao eventRegistrationDao;

    public MeetingService(Connection connection) {
        this.meetingDao = new MeetingDao(connection);
        this.eventRegistrationDao = new EventRegistrationDao(connection);
    }

    public boolean createMeeting(String title, String description, String eventDate,
                                 int maxAttendance, String location, Long authorId) {
        try {
            System.out.println("üìÖ –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞ –≤—Ö–æ–¥: " + eventDate);

            LocalDateTime dateTime = parseDateTime(eventDate);
            if (dateTime == null) {
                System.err.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: " + eventDate);
                return false;
            }

            MeetingPost meeting = new MeetingPost();
            meeting.setTitle(title);
            meeting.setDescription(description);
            meeting.setEventDate(dateTime);
            meeting.setMaxAttendance(maxAttendance);
            meeting.setLocation(location);
            meeting.setAuthorId(authorId);

            System.out.println("‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞: " + dateTime);

            return meetingDao.create(meeting);
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    public List<MeetingPost> getAllMeetings() {
        List<MeetingPost> meetings = meetingDao.findAll();

        // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö
        for (MeetingPost meeting : meetings) {
            enrichMeetingWithRegistrationData(meeting);
        }

        return meetings;
    }

    public MeetingPost getMeetingById(Long id) {
        MeetingPost meeting = meetingDao.findById(id);
        if (meeting != null) {
            enrichMeetingWithRegistrationData(meeting);
        }
        return meeting;
    }

    public boolean updateMeeting(Long id, String title, String description, String eventDate,
                                 int maxAttendance, String location) {
        try {
            MeetingPost meeting = meetingDao.findById(id);
            if (meeting == null) return false;

            LocalDateTime dateTime = parseDateTime(eventDate);
            if (dateTime == null) {
                return false;
            }

            meeting.setTitle(title);
            meeting.setDescription(description);
            meeting.setEventDate(dateTime);
            meeting.setMaxAttendance(maxAttendance);
            meeting.setLocation(location);

            return meetingDao.update(meeting);
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    public boolean isAuthor(Long meetingId, Long userId) {
        MeetingPost meeting = meetingDao.findById(meetingId);
        return meeting != null && meeting.getAuthorId().equals(userId);
    }

    public boolean deleteMeeting(Long id) {
        return meetingDao.delete(id);
    }

    private void enrichMeetingWithRegistrationData(MeetingPost meeting) {
        if (meeting == null) return;

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        List<EventRegistration> participants = eventRegistrationDao.findRegisteredUsersByPost(meeting.getId());
        meeting.setParticipants(participants);

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞
        int registeredCount = participants.size();
        meeting.setAvailableSpots(Math.max(0, meeting.getMaxAttendance() - registeredCount));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –≤—Å—Ç—Ä–µ—á–∞
        meeting.setFull(registeredCount >= meeting.getMaxAttendance());
    }

    private LocalDateTime parseDateTime(String dateTimeStr) {
        if (dateTimeStr == null || dateTimeStr.trim().isEmpty()) {
            return null;
        }

        dateTimeStr = dateTimeStr.trim();
        System.out.println("üîç –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: " + dateTimeStr);

        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        DateTimeFormatter[] formatters = {
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"),
                DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm"),
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm"),
                DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"),
                DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"),
                DateTimeFormatter.ISO_LOCAL_DATE_TIME
        };

        for (DateTimeFormatter formatter : formatters) {
            try {
                LocalDateTime result = LocalDateTime.parse(dateTimeStr, formatter);
                System.out.println("‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: " + formatter);
                return result;
            } catch (DateTimeParseException e) {
                // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç
            }
        }

        // –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏, –ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ HTML datetime-local (2026-01-10T04:04)
            if (dateTimeStr.contains("T")) {
                String[] parts = dateTimeStr.split("T");
                if (parts.length == 2) {
                    String datePart = parts[0];
                    String timePart = parts[1];

                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                    if (timePart.split(":").length == 2) {
                        timePart += ":00";
                    }

                    String formatted = datePart + " " + timePart;
                    System.out.println("üîÑ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: " + formatted);

                    return LocalDateTime.parse(formatted, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                }
            }

            // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if (dateTimeStr.matches("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}")) {
                return LocalDateTime.parse(dateTimeStr + ":00", DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
            }

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã: " + e.getMessage());
        }

        System.err.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤: " + dateTimeStr);
        return null;
    }
}