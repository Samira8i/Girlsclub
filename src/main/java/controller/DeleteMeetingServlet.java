package controller;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.User;
import service.ServiceFactory;
import service.MeetingService;
import service.UserService;
import exceptions.AuthenticationException;

import java.io.IOException;

@WebServlet("/meeting/delete")
public class DeleteMeetingServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        System.out.println("üîç DeleteMeetingServlet: –Ω–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è");
        try {
            UserService userService = ServiceFactory.getUserService();

            String sessionId = extractSessionId(request.getCookies());
            if (sessionId == null) {
                System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
                response.sendRedirect(request.getContextPath() + "/login");
                return;
            }

            User user = userService.getUserBySessionId(sessionId);

            MeetingService meetingService = ServiceFactory.getMeetingService();

            String idParam = request.getParameter("id");
            System.out.println("üì® –ü–æ–ª—É—á–µ–Ω ID –ø–∞—Ä–∞–º–µ—Ç—Ä: " + idParam);

            if (idParam == null || idParam.trim().isEmpty()) {
                request.setAttribute("error", "ID –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω");
                response.sendRedirect(request.getContextPath() + "/main");
                return;
            }

            Long id = Long.parseLong(idParam);
            System.out.println("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: " + user.getId() + " –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É ID: " + id);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Å—Ç—Ä–µ—á–∞
            var meeting = meetingService.getMeetingById(id);
            if (meeting == null) {
                System.out.println("‚ùå –í—Å—Ç—Ä–µ—á–∞ —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                request.setAttribute("error", "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                response.sendRedirect(request.getContextPath() + "/main");
                return;
            }

            System.out.println("üìù –ê–≤—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á–∏: " + meeting.getAuthorId() + ", —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + user.getId());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º –≤—Å—Ç—Ä–µ—á–∏
            if (meeting.getAuthorId().equals(user.getId())) {
                System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º, —É–¥–∞–ª—è–µ–º...");
                boolean deleted = meetingService.deleteMeeting(id);
                System.out.println("üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: " + deleted);

                if (deleted) {
                    request.setAttribute("message", "–í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!");
                    System.out.println("‚úÖ –í—Å—Ç—Ä–µ—á–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
                } else {
                    request.setAttribute("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
                    System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã");
                }
            } else {
                System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –≤—Å—Ç—Ä–µ—á–∏");
                request.setAttribute("error", "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –≤—Å—Ç—Ä–µ—á–∏");
            }

        } catch (AuthenticationException e) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        } catch (NumberFormatException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID: " + e.getMessage());
            request.setAttribute("error", "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á–∏");
        } catch (Exception e) {
            System.out.println("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + e.getMessage());
        }

        response.sendRedirect(request.getContextPath() + "/main");
    }

    private String extractSessionId(Cookie[] cookies) {
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if ("sessionId".equals(cookie.getName())) {
                    return cookie.getValue();
                }
            }
        }
        return null;
    }
}