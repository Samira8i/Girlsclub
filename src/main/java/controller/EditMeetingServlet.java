package controller;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import model.MeetingPost;
import model.User;
import service.ServiceFactory;
import service.MeetingService;
import service.UserService;
import exceptions.AuthenticationException;

import java.io.IOException;

@WebServlet("/meeting/edit")
public class EditMeetingServlet extends HttpServlet {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            UserService userService = ServiceFactory.getUserService();

            String sessionId = extractSessionId(request.getCookies());
            if (sessionId == null) {
                response.sendRedirect(request.getContextPath() + "/login");
                return;
            }

            User user = userService.getUserBySessionId(sessionId);

            String idParam = request.getParameter("id");
            if (idParam == null || idParam.trim().isEmpty()) {
                request.setAttribute("error", "ID –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ —É–∫–∞–∑–∞–Ω");
                response.sendRedirect(request.getContextPath() + "/main");
                return;
            }

            MeetingService meetingService = ServiceFactory.getMeetingService();
            Long meetingId = Long.parseLong(idParam);

            MeetingPost meeting = meetingService.getMeetingById(meetingId);

            if (meeting == null) {
                request.setAttribute("error", "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                response.sendRedirect(request.getContextPath() + "/main");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º
            if (!meeting.getAuthorId().equals(user.getId())) {
                request.setAttribute("error", "–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –≤—Å—Ç—Ä–µ—á–∏");
                response.sendRedirect(request.getContextPath() + "/main");
                return;
            }

            request.setAttribute("meeting", meeting);
            request.setAttribute("user", user);
            request.getRequestDispatcher("/WEB-INF/views/edit-meeting.jsp").forward(request, response);

        } catch (AuthenticationException e) {
            response.sendRedirect(request.getContextPath() + "/login");
        } catch (NumberFormatException e) {
            request.setAttribute("error", "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á–∏");
            response.sendRedirect(request.getContextPath() + "/main");
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å—Ç—Ä–µ—á–∏");
            response.sendRedirect(request.getContextPath() + "/main");
        }
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            UserService userService = ServiceFactory.getUserService();

            String sessionId = extractSessionId(request.getCookies());
            if (sessionId == null) {
                response.sendRedirect(request.getContextPath() + "/login");
                return;
            }

            User user = userService.getUserBySessionId(sessionId);

            String idParam = request.getParameter("id");
            String title = request.getParameter("title");
            String description = request.getParameter("description");
            String eventDate = request.getParameter("eventDate");
            String maxAttendanceStr = request.getParameter("maxAttendance");
            String location = request.getParameter("location");

            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            System.out.println("=== –î–ï–ë–ê–ì –ò–ù–§–û–†–ú–ê–¶–ò–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===");
            System.out.println("ID: " + idParam);
            System.out.println("Title: " + title);
            System.out.println("Description: " + description);
            System.out.println("EventDate: " + eventDate);
            System.out.println("MaxAttendance: " + maxAttendanceStr);
            System.out.println("Location: " + location);
            System.out.println("======================");

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (idParam == null || idParam.trim().isEmpty() ||
                    title == null || title.trim().isEmpty() ||
                    description == null || description.trim().isEmpty() ||
                    eventDate == null || eventDate.trim().isEmpty() ||
                    maxAttendanceStr == null || maxAttendanceStr.trim().isEmpty() ||
                    location == null || location.trim().isEmpty()) {

                request.setAttribute("error", "‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
                request.setAttribute("user", user);
                request.getRequestDispatcher("/WEB-INF/views/edit-meeting.jsp").forward(request, response);
                return;
            }

            MeetingService meetingService = ServiceFactory.getMeetingService();
            Long meetingId = Long.parseLong(idParam);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –∏ –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ
            MeetingPost existingMeeting = meetingService.getMeetingById(meetingId);
            if (existingMeeting == null) {
                request.setAttribute("error", "–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                response.sendRedirect(request.getContextPath() + "/main");
                return;
            }

            if (!existingMeeting.getAuthorId().equals(user.getId())) {
                request.setAttribute("error", "–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –≤—Å—Ç—Ä–µ—á–∏");
                response.sendRedirect(request.getContextPath() + "/main");
                return;
            }

            int maxAttendance = Integer.parseInt(maxAttendanceStr);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            String formattedDate = eventDate.replace("T", " ") + ":00";
            System.out.println("üìÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: " + formattedDate);

            boolean success = meetingService.updateMeeting(
                    meetingId,
                    title.trim(),
                    description.trim(),
                    formattedDate,
                    maxAttendance,
                    location.trim()
            );

            if (success) {
                System.out.println("‚úÖ –í—Å—Ç—Ä–µ—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
                response.sendRedirect(request.getContextPath() + "/main?success=meeting_updated");
            } else {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ");
                request.setAttribute("error", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
                request.setAttribute("meeting", existingMeeting);
                request.setAttribute("user", user);
                request.getRequestDispatcher("/WEB-INF/views/edit-meeting.jsp").forward(request, response);
            }
        } catch (AuthenticationException e) {
            response.sendRedirect(request.getContextPath() + "/login");
        } catch (NumberFormatException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–ª–∞: " + e.getMessage());
            request.setAttribute("error", "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
            request.getRequestDispatcher("/WEB-INF/views/edit-meeting.jsp").forward(request, response);
        } catch (Exception e) {
            System.err.println("‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
            request.setAttribute("error", "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: " + e.getMessage());
            request.getRequestDispatcher("/WEB-INF/views/edit-meeting.jsp").forward(request, response);
        }
    }

    private String extractSessionId(Cookie[] cookies) {
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if ("sessionId".equals(cookie.getName())) {
                    return cookie.getValue();
                }
            }
        }
        return null;
    }
}